// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/vnet.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	model "hyacinth-backend/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVnetRepository is a mock of VnetRepository interface.
type MockVnetRepository struct {
	ctrl     *gomock.Controller
	recorder *MockVnetRepositoryMockRecorder
}

// MockVnetRepositoryMockRecorder is the mock recorder for MockVnetRepository.
type MockVnetRepositoryMockRecorder struct {
	mock *MockVnetRepository
}

// NewMockVnetRepository creates a new mock instance.
func NewMockVnetRepository(ctrl *gomock.Controller) *MockVnetRepository {
	mock := &MockVnetRepository{ctrl: ctrl}
	mock.recorder = &MockVnetRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVnetRepository) EXPECT() *MockVnetRepositoryMockRecorder {
	return m.recorder
}

// CheckVnetTokenExists mocks base method.
func (m *MockVnetRepository) CheckVnetTokenExists(ctx context.Context, token, excludeVnetId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVnetTokenExists", ctx, token, excludeVnetId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVnetTokenExists indicates an expected call of CheckVnetTokenExists.
func (mr *MockVnetRepositoryMockRecorder) CheckVnetTokenExists(ctx, token, excludeVnetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVnetTokenExists", reflect.TypeOf((*MockVnetRepository)(nil).CheckVnetTokenExists), ctx, token, excludeVnetId)
}

// CreateVnet mocks base method.
func (m *MockVnetRepository) CreateVnet(ctx context.Context, vnet *model.Vnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVnet", ctx, vnet)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVnet indicates an expected call of CreateVnet.
func (mr *MockVnetRepositoryMockRecorder) CreateVnet(ctx, vnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVnet", reflect.TypeOf((*MockVnetRepository)(nil).CreateVnet), ctx, vnet)
}

// DeleteVnet mocks base method.
func (m *MockVnetRepository) DeleteVnet(ctx context.Context, vnetId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVnet", ctx, vnetId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVnet indicates an expected call of DeleteVnet.
func (mr *MockVnetRepositoryMockRecorder) DeleteVnet(ctx, vnetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVnet", reflect.TypeOf((*MockVnetRepository)(nil).DeleteVnet), ctx, vnetId)
}

// GetOnlineDevicesCount mocks base method.
func (m *MockVnetRepository) GetOnlineDevicesCount(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineDevicesCount", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineDevicesCount indicates an expected call of GetOnlineDevicesCount.
func (mr *MockVnetRepositoryMockRecorder) GetOnlineDevicesCount(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineDevicesCount", reflect.TypeOf((*MockVnetRepository)(nil).GetOnlineDevicesCount), ctx, userId)
}

// GetOnlineTunnels mocks base method.
func (m *MockVnetRepository) GetOnlineTunnels(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineTunnels", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineTunnels indicates an expected call of GetOnlineTunnels.
func (mr *MockVnetRepositoryMockRecorder) GetOnlineTunnels(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineTunnels", reflect.TypeOf((*MockVnetRepository)(nil).GetOnlineTunnels), ctx, userId)
}

// GetRunningVnetCount mocks base method.
func (m *MockVnetRepository) GetRunningVnetCount(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningVnetCount", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningVnetCount indicates an expected call of GetRunningVnetCount.
func (mr *MockVnetRepositoryMockRecorder) GetRunningVnetCount(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningVnetCount", reflect.TypeOf((*MockVnetRepository)(nil).GetRunningVnetCount), ctx, userId)
}

// GetVnetByUserId mocks base method.
func (m *MockVnetRepository) GetVnetByUserId(ctx context.Context, userId string) (*[]model.Vnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetByUserId", ctx, userId)
	ret0, _ := ret[0].(*[]model.Vnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetByUserId indicates an expected call of GetVnetByUserId.
func (mr *MockVnetRepositoryMockRecorder) GetVnetByUserId(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetByUserId", reflect.TypeOf((*MockVnetRepository)(nil).GetVnetByUserId), ctx, userId)
}

// GetVnetByVnetId mocks base method.
func (m *MockVnetRepository) GetVnetByVnetId(ctx context.Context, vnetId string) (*model.Vnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetByVnetId", ctx, vnetId)
	ret0, _ := ret[0].(*model.Vnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetByVnetId indicates an expected call of GetVnetByVnetId.
func (mr *MockVnetRepositoryMockRecorder) GetVnetByVnetId(ctx, vnetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetByVnetId", reflect.TypeOf((*MockVnetRepository)(nil).GetVnetByVnetId), ctx, vnetId)
}

// UpdateVnet mocks base method.
func (m *MockVnetRepository) UpdateVnet(ctx context.Context, vnet *model.Vnet) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVnet", ctx, vnet)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVnet indicates an expected call of UpdateVnet.
func (mr *MockVnetRepositoryMockRecorder) UpdateVnet(ctx, vnet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVnet", reflect.TypeOf((*MockVnetRepository)(nil).UpdateVnet), ctx, vnet)
}
