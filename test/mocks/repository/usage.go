// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/usage.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	v1 "hyacinth-backend/api/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsageRepository is a mock of UsageRepository interface.
type MockUsageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUsageRepositoryMockRecorder
}

// MockUsageRepositoryMockRecorder is the mock recorder for MockUsageRepository.
type MockUsageRepositoryMockRecorder struct {
	mock *MockUsageRepository
}

// NewMockUsageRepository creates a new mock instance.
func NewMockUsageRepository(ctrl *gomock.Controller) *MockUsageRepository {
	mock := &MockUsageRepository{ctrl: ctrl}
	mock.recorder = &MockUsageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageRepository) EXPECT() *MockUsageRepositoryMockRecorder {
	return m.recorder
}

// GetUsage mocks base method.
func (m *MockUsageRepository) GetUsage(ctx context.Context, userId, vnetId, timeRange string) (*[]v1.UsageData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage", ctx, userId, vnetId, timeRange)
	ret0, _ := ret[0].(*[]v1.UsageData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockUsageRepositoryMockRecorder) GetUsage(ctx, userId, vnetId, timeRange interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockUsageRepository)(nil).GetUsage), ctx, userId, vnetId, timeRange)
}
