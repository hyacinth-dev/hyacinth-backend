// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/usage.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	v1 "hyacinth-backend/api/v1"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUsageService is a mock of UsageService interface.
type MockUsageService struct {
	ctrl     *gomock.Controller
	recorder *MockUsageServiceMockRecorder
}

// MockUsageServiceMockRecorder is the mock recorder for MockUsageService.
type MockUsageServiceMockRecorder struct {
	mock *MockUsageService
}

// NewMockUsageService creates a new mock instance.
func NewMockUsageService(ctrl *gomock.Controller) *MockUsageService {
	mock := &MockUsageService{ctrl: ctrl}
	mock.recorder = &MockUsageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUsageService) EXPECT() *MockUsageServiceMockRecorder {
	return m.recorder
}

// GetUsage mocks base method.
func (m *MockUsageService) GetUsage(ctx context.Context, req *v1.GetUsageRequest) (*v1.GetUsageResponseData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsage", ctx, req)
	ret0, _ := ret[0].(*v1.GetUsageResponseData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsage indicates an expected call of GetUsage.
func (mr *MockUsageServiceMockRecorder) GetUsage(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsage", reflect.TypeOf((*MockUsageService)(nil).GetUsage), ctx, req)
}
