// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/vnet.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	v1 "hyacinth-backend/api/v1"
	model "hyacinth-backend/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockVnetService is a mock of VnetService interface.
type MockVnetService struct {
	ctrl     *gomock.Controller
	recorder *MockVnetServiceMockRecorder
}

// MockVnetServiceMockRecorder is the mock recorder for MockVnetService.
type MockVnetServiceMockRecorder struct {
	mock *MockVnetService
}

// NewMockVnetService creates a new mock instance.
func NewMockVnetService(ctrl *gomock.Controller) *MockVnetService {
	mock := &MockVnetService{ctrl: ctrl}
	mock.recorder = &MockVnetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVnetService) EXPECT() *MockVnetServiceMockRecorder {
	return m.recorder
}

// CheckVnetTokenExists mocks base method.
func (m *MockVnetService) CheckVnetTokenExists(ctx context.Context, token, excludeVnetId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVnetTokenExists", ctx, token, excludeVnetId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckVnetTokenExists indicates an expected call of CheckVnetTokenExists.
func (mr *MockVnetServiceMockRecorder) CheckVnetTokenExists(ctx, token, excludeVnetId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVnetTokenExists", reflect.TypeOf((*MockVnetService)(nil).CheckVnetTokenExists), ctx, token, excludeVnetId)
}

// CreateVnet mocks base method.
func (m *MockVnetService) CreateVnet(ctx context.Context, req *v1.CreateVnetRequest, userId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVnet", ctx, req, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateVnet indicates an expected call of CreateVnet.
func (mr *MockVnetServiceMockRecorder) CreateVnet(ctx, req, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVnet", reflect.TypeOf((*MockVnetService)(nil).CreateVnet), ctx, req, userId)
}

// DeleteVnet mocks base method.
func (m *MockVnetService) DeleteVnet(ctx context.Context, req *v1.DeleteVnetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVnet", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVnet indicates an expected call of DeleteVnet.
func (mr *MockVnetServiceMockRecorder) DeleteVnet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVnet", reflect.TypeOf((*MockVnetService)(nil).DeleteVnet), ctx, req)
}

// DisableVnet mocks base method.
func (m *MockVnetService) DisableVnet(ctx context.Context, req *v1.DisableVnetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableVnet", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableVnet indicates an expected call of DisableVnet.
func (mr *MockVnetServiceMockRecorder) DisableVnet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableVnet", reflect.TypeOf((*MockVnetService)(nil).DisableVnet), ctx, req)
}

// EnableVnet mocks base method.
func (m *MockVnetService) EnableVnet(ctx context.Context, req *v1.EnableVnetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableVnet", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableVnet indicates an expected call of EnableVnet.
func (mr *MockVnetServiceMockRecorder) EnableVnet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableVnet", reflect.TypeOf((*MockVnetService)(nil).EnableVnet), ctx, req)
}

// GetOnlineDevicesCount mocks base method.
func (m *MockVnetService) GetOnlineDevicesCount(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineDevicesCount", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineDevicesCount indicates an expected call of GetOnlineDevicesCount.
func (mr *MockVnetServiceMockRecorder) GetOnlineDevicesCount(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineDevicesCount", reflect.TypeOf((*MockVnetService)(nil).GetOnlineDevicesCount), ctx, userId)
}

// GetOnlineTunnels mocks base method.
func (m *MockVnetService) GetOnlineTunnels(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineTunnels", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineTunnels indicates an expected call of GetOnlineTunnels.
func (mr *MockVnetServiceMockRecorder) GetOnlineTunnels(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineTunnels", reflect.TypeOf((*MockVnetService)(nil).GetOnlineTunnels), ctx, userId)
}

// GetRunningVnetCount mocks base method.
func (m *MockVnetService) GetRunningVnetCount(ctx context.Context, userId string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRunningVnetCount", ctx, userId)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRunningVnetCount indicates an expected call of GetRunningVnetCount.
func (mr *MockVnetServiceMockRecorder) GetRunningVnetCount(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRunningVnetCount", reflect.TypeOf((*MockVnetService)(nil).GetRunningVnetCount), ctx, userId)
}

// GetVnetByUserId mocks base method.
func (m *MockVnetService) GetVnetByUserId(ctx context.Context, id string) (*[]model.Vnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetByUserId", ctx, id)
	ret0, _ := ret[0].(*[]model.Vnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetByUserId indicates an expected call of GetVnetByUserId.
func (mr *MockVnetServiceMockRecorder) GetVnetByUserId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetByUserId", reflect.TypeOf((*MockVnetService)(nil).GetVnetByUserId), ctx, id)
}

// GetVnetByVnetId mocks base method.
func (m *MockVnetService) GetVnetByVnetId(ctx context.Context, id string) (*model.Vnet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnetByVnetId", ctx, id)
	ret0, _ := ret[0].(*model.Vnet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnetByVnetId indicates an expected call of GetVnetByVnetId.
func (mr *MockVnetServiceMockRecorder) GetVnetByVnetId(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnetByVnetId", reflect.TypeOf((*MockVnetService)(nil).GetVnetByVnetId), ctx, id)
}

// UpdateVnet mocks base method.
func (m *MockVnetService) UpdateVnet(ctx context.Context, req *v1.UpdateVnetRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVnet", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateVnet indicates an expected call of UpdateVnet.
func (mr *MockVnetServiceMockRecorder) UpdateVnet(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVnet", reflect.TypeOf((*MockVnetService)(nil).UpdateVnet), ctx, req)
}
